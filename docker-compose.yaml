version: "3"

networks:
  my-network:

volumes:
  postgres:
  postgres_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  grafana_data:
  grafana_log:
  grafana_plugins:
  grafana_provisioning:
  prometheus:
  postgres_exporter_data:

services:
  postgres:
    image: postgres:16.0
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=sonar
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - TZ=America/Sao_Paulo
    volumes:
      - postgres:/var/lib/postgresql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U sonar -d sonar -h localhost",
        ]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 0s

  sonarqube:
    image: sonarqube:9.9.4-community
    container_name: sonarqube
    restart: unless-stopped
    environment:
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_SEARCH_JAVAADDITIONALOPTS=-Dnode.store.allow_mmap=false,-Ddiscovery.type=single-node
      - SONAR_WEB_CONTEXT=/sonarqube
      - TZ=America/Sao_Paulo
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - my-network
    depends_on:
      postgres:
        condition: service_healthy

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_DOMAIN=localhost:8080
      - GF_SERVER_ROOT_URL=http://localhost:8080/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - TZ=America/Sao_Paulo
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_log:/var/log/grafana
      - grafana_plugins:/var/lib/grafana/plugins
      - grafana_provisioning:/etc/grafana/provisioning
    networks:
      - my-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: unless-stopped
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      - ./html:/usr/share/nginx/html:rw
      - ./conf:/etc/nginx/conf.d
    ports:
      - 8080:80
      - 443:443
    networks:
      - my-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus:/etc/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - my-network

  postgres_exporter:
    image: wrouesnel/postgres_exporter:latest
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://sonar:sonar@postgres:5432/?sslmode=disable
    volumes:
      - postgres_exporter_data:/var/lib/postgres_exporter
    networks:
      - my-network
    depends_on:
      postgres:
        condition: service_healthy

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    volumes:
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - my-network